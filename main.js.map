{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./modules/log/index.ts","webpack:///./modules/observer/index.ts","webpack:///./modules/flux/store/index.ts","webpack:///./modules/flux/dispatcher/index.ts","webpack:///./app/modules/flux/actions/input.ts","webpack:///./app/modules/flux/actions/data.ts","webpack:///./app/modules/flux/actions/button.ts","webpack:///./app/services/data.ts","webpack:///./app/modules/flux/store/index.ts","webpack:///./modules/flux/view/index.ts","webpack:///./app/modules/flux/views/log.ts","webpack:///./app/modules/flux/views/form.ts","webpack:///./modules/mvp/model/index.ts","webpack:///./modules/mvp/presenter/index.ts","webpack:///./modules/mvp/view/index.ts","webpack:///./app/modules/mvp/presenters/index.ts","webpack:///./app/modules/mvp/model/index.ts","webpack:///./app/index.ts","webpack:///./app/modules/mvp/views/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","messageType","Logger","[object Object]","message","type","ERROR","console","error","log","HTMLLogger","super","this","_HTMLNode","document","querySelector","HTMLNode","innerHTML","Observable","_value","_observers","_notifyObservers","observer","push","splice","indexOf","arg","forEach","update","store_TYPE","store_Store","_state","state$","_instance","Error","dispatcher","state","callbacks","INFO","key","register","next","getValue","payload","keys","length","assign","dispatcher_TYPE","dispatcher_Dispatcher","_callbacks","Map","callback","has","set","action","index","INPUT_TYPE","DATA_TYPE","BUTTON_TYPE","sendToServer","data","Promise","resolve","reject","id","setTimeout","clearTimeout","store_dispatcher","store_store","createStore","logList","currentData","isSending","dispatch","changeEvent","then","catch","e","view_TYPE","view_View","_node","_observable","_keys","registerObserver","node","childNodes","dataset","bind","undefined","innerText","disabledKey","disabled","tag","tagName","_template","_render","render","model_Model","presenter_Presenter","view","_view","_model","init","_update","model","modelClass","mvp_view_View","_presenter","presenterClass","provide","presenter","presenters_MVPPresenter","renderLabel","changeDisableState","isDisabled","resp","model_MVPModel","flux","input","button","addEventListener","app_FLUXInit","click","keyup","app_MVPInit"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export enum messageType {\n    INFO,\n    ERROR,\n}\n\nexport interface ILog {\n     log(message: string, type: messageType): void;\n}\n\nexport class Logger implements ILog {\n    log(message, type) {\n        if (type === messageType.ERROR) {\n            console.error(message);\n        } else {\n            console.log(message);\n        }\n    }\n}\n\n// по умолчанию .log\n// но можно переопределить\n\nexport class HTMLLogger extends Logger {\n    private _HTMLNode;\n\n    constructor() {\n        super();\n        this._HTMLNode = document.querySelector('.log');\n    }\n\n    set HTMLNode(value) {\n        // check value  not empty\n        this._HTMLNode = value;\n    }\n\n    get HTMLNode(){\n        return this._HTMLNode;\n    }\n\n   log(message, type) {\n        super.log(message, type);\n        if (this._HTMLNode) {\n            this._HTMLNode.innerHTML += `${message} <br>`;\n        }\n    }\n}\n","export interface IObserver {\n    update(arg: any);\n}\n\nexport class Observable {\n    private _observers : IObserver [];\n    private _value;\n\n    constructor(value) {\n        this._value = value;\n        this._observers = [];\n    }\n\n\n    public next(value) {\n        this._value = value;\n        this._notifyObservers(value);\n    }\n\n    public getValue() {\n        return this._value;\n    }\n\n    public registerObserver (observer : IObserver) : void {\n        this._observers.push(observer);\n    }\n\n    public removeObserver (observer : IObserver) : void {\n        this._observers.splice(this._observers.indexOf(observer), 1);\n    }\n\n    private _notifyObservers (arg : any) : void {\n        this._observers.forEach((observer : IObserver) => {\n            observer.update(arg);\n        });\n    }\n}\n","import { Dispatcher } from '../dispatcher/index';\nimport { messageType, HTMLLogger } from '../../log/index';\nimport { Observable } from '../../observer/index';\n\nconst TYPE = 'STORE';\n\nexport class Store extends HTMLLogger {\n\n    private constructor() {\n        super();\n\n        Store._state = new Observable({});\n        this.state$ = Store._state;\n\n        if (Store._instance) {\n            throw new Error('only one Store is Allowed');\n        }\n    }\n\n    protected static _instance: Store = new Store;\n    protected static dispatcher: Dispatcher;\n\n    protected static _state: Observable;\n    public state$: Observable;\n\n    public static createStore({\n        dispatcher,\n        state,\n        callbacks,\n    }) {\n        Store._instance.log(`${TYPE}: БЫЛ СОЗДАН`, messageType.INFO);\n        Store.dispatcher = dispatcher;\n\n        for (const key in callbacks) {\n            this.dispatcher.register(key, callbacks[key]);\n        }\n\n        Store._state.next(state);\n\n        return this._instance;\n    }\n\n    get state() {\n        return Store._state.getValue();\n    }\n\n    changeEvent(payload) {\n        const keys = Object.keys(payload);\n        const log = (keys.length) ?\n            `${TYPE}: ИЗМЕНИЛ ЗНАЧЕНИЯ ' ${keys} ' КЛЮЧА/КЛЮЧЕЙ` :\n            `${TYPE}: ПРОИЗОШЛО СОБЫТИЕ CHANGE EVENT, НО ЗФНДЩФВ БЫЛ ПУСТОЙ`;\n        this.log(log, messageType.INFO);\n        if (keys.length) { // для того чтобы рендер выполнялся только при наличии payload\n            Store._state.next(Object.assign(this.state, payload));\n        }\n    }\n}\n\n","import { IAction } from '../action/index';\nimport { messageType, HTMLLogger } from '../../log/';\n\nconst TYPE = 'DISPATCHER';\n\nexport class Dispatcher extends HTMLLogger {\n    constructor() {\n\n        if (Dispatcher._instance) {\n            return Dispatcher._instance;\n        }\n        super();\n        this._callbacks = new Map();\n    }\n\n    private _callbacks;\n    protected static _instance: Dispatcher = new Dispatcher;\n\n    register(type: string, callback: Function) {\n\n        if (!this._callbacks.has(type)) {\n            this._callbacks.set(type, []);\n        }\n\n        this._callbacks.get(type).push(callback);\n\n        this.log(`${TYPE}: ЗАРЕГИСТРИРОВАЛ ${type} CALLBACK`, messageType.INFO);\n    }\n\n    dispatch(action: IAction<any>) {\n        \n        if (this._callbacks.has(action.type)) {\n            this._callbacks.get(action.type).forEach((callback) =>  {\n                this.log(`${TYPE}: ПРОБРОСИЛ ${action.type} CALLBACK`, messageType.INFO);\n                callback(action.payload);\n            });\n        } else {\n            this.log(`${TYPE}: CALLBACK С ТИПОМ ${action.type} НЕ ЗАРЕГИСТРИРОВАН В СИСТЕМЕ`, messageType.ERROR);\n        }\n    }\n\n    unregister(type, index: number) {\n        if (this._callbacks.has(type)) {\n            const callbacks = this._callbacks.get(type);\n            if (index < callbacks.length && index >= 0) {\n                this._callbacks.get(type).splice(index, 1);\n                this.log(\n                    `${TYPE}: ОТВЯЗАЛИ CALLBACK С ТИПОМ ${type} и ИНДЕКСОМ ${index}`,\n                    messageType.INFO,\n                );\n            }\n        }\n    }\n}\n","export const INPUT_TYPE = {\n   CLICK: 'INPUT_CLICK',\n   KEYUP: 'INPUT_ON_KEY_UP',\n};\n","export const DATA_TYPE = {\n    SEND_DATA: 'SEND DATA TO SERVER',\n    SEND_SUCCESS: 'SUCCESS! DATA SENT',\n    SEND_ERROR: 'ERROR_DATA',\n};\n","export const BUTTON_TYPE = {\n    CLICK: 'BUTTON_CLICK',\n};\n","const TIMEOUT = 800;\n\nconst sendToServer = (data) => {\n    // Выполняется какая то асинхронная операция\n\n    return new Promise((resolve, reject) => {\n        const id = setTimeout(() => {\n            resolve(data);\n            clearTimeout(id);\n        }, TIMEOUT);\n        // reject() if\n    });\n};\n\nexport { sendToServer };\n","import { Store } from '../../../../modules/flux/store/index';\nimport { Dispatcher } from '../../../../modules/flux/dispatcher/index';\n\nimport { INPUT_TYPE, DATA_TYPE, BUTTON_TYPE } from '../actions/';\nimport { sendToServer } from '../../../services/data';\n\nconst dispatcher = new Dispatcher();\nconst state = {\n    log: '',\n    logList: [],\n    currentData: '',\n    data: 'Здесь появится ответ сервера',\n    isSending: false,\n};\n\nexport const store = Store.createStore({\n    dispatcher,\n    state,\n    callbacks: { // mutations\n        [BUTTON_TYPE.CLICK]: () => {\n            dispatcher.dispatch({ type: DATA_TYPE.SEND_DATA });\n             // может не стоит передовать стору пустые значения,\n        },\n        [INPUT_TYPE.KEYUP]: (payload) => {\n            store.changeEvent({ currentData: payload }); //  мутирем стор только через change Event\n        },\n        [DATA_TYPE.SEND_DATA]: () => {\n            store.changeEvent({ isSending: true });\n            sendToServer(store.state.currentData).then((data) => {\n                dispatcher.dispatch({\n                    type: DATA_TYPE.SEND_SUCCESS,\n                    payload: (data) ? data : 'YOU SEND EMPTY DATA',\n                });\n                store.changeEvent({ isSending: false });\n            }).catch((e) => {\n                dispatcher.dispatch({ type: DATA_TYPE.SEND_ERROR });\n                store.changeEvent({ isSending: false });\n            });\n\n        },\n        [DATA_TYPE.SEND_SUCCESS]: (payload) => {\n            store.changeEvent({ data: payload });\n        },\n    },\n});\n","import { HTMLLogger, messageType } from '../../log/index';\nimport { IObserver, Observable } from '../../observer/index';\nconst TYPE = 'VIEW';\nexport class View extends HTMLLogger implements IObserver {\n\n    private _template;\n    private _keys = {};\n\n    constructor(private _node, private _observable: Observable) {\n        super();\n        this._node = _node;\n        this._observable = _observable;\n        this._observable.registerObserver(this);\n\n    }\n\n    private _render(state) {\n        // Не живой пример - проходимся только по узлам первой вложенности\n        for (const node of this._node.childNodes) {\n           // сохраняем ключи и сравниваем изменились они или нет и если изменились делать рендер\n           const key = node.dataset.bind;\n\n           if (key !== undefined) {\n               if (this._keys[key] === undefined || state[key] !== this._keys[key]) {\n                   this.log(`${TYPE}: РЕНДЕР ' innerText '`, messageType.INFO);\n                   node.innerText = state[key];\n                   this._keys[key] = state[key];\n               }\n           }\n\n           const disabledKey = node.dataset.disabled;\n           const tag = node.tagName;\n            // node tag name тестовое решение проблемы двух нод с одинковым проперти\n            if (disabledKey !== undefined) {\n                if (this._keys[`${tag}_${disabledKey}`] === undefined ||\n                    state[disabledKey] !== this._keys[`${tag}_${disabledKey}`]) {\n                    this.log(`${TYPE}: РЕНДЕР ' disabled props '`, messageType.INFO);\n                    node.disabled = state[disabledKey];\n                    this._keys[`${tag}_${disabledKey}`] = state[disabledKey];\n                }\n            }\n        }\n    }\n\n    public render(callback) {\n        this._template = callback();\n        this._node.innerHTML = this._template;\n        this._render(this._observable.getValue());\n    }\n\n    update(state) {\n        this._render(state);\n    }\n}\n","import { store } from '../store/index';\nimport { View } from '../../../../modules/flux/view/index';\nconst flux = document.querySelector('.flux');\nconst label = flux.querySelector('.view-stub__label');\nconst logNode = new View(label, store.state$);\n\nlogNode.render(() => {\n    return `<div data-bind=\"data\"></div>`;\n});\n\nexport { logNode };\n","import { store } from '../store/index';\nimport { View } from '../../../../modules/flux/view/index';\nconst flux = document.querySelector('.flux');\nconst form = flux.querySelector('.view-stub__input-block');\nconst formNode = new View(form, store.state$);\n\nformNode.render(() => {\n    return `<input class=\"view-stub__input\" data-disabled=\"isSending\"/><button class=\"view-stub__apply\" data-disabled=\"isSending\">Отправить на сервер</button>`;\n});\n\nexport { formNode };\n\n\n","import { HTMLLogger, messageType } from '../../log/index';\nexport class Model extends HTMLLogger{\n    private _state = {};\n\n    constructor(){\n        super();\n        this.HTMLNode = document.querySelector('.mvp').querySelector('.log');\n    }\n\n    set state(data){\n        this._state = Object.assign(this._state, data);\n    }\n\n    get state(){\n        return this._state;\n    }\n}\n\n\n// хранит логику\n","import { Model } from '../model/index';\nimport { IView } from '../view/index';\nimport { HTMLLogger, messageType } from '../../log/index';\n\nexport class Presenter extends HTMLLogger{\n    private _view: IView;\n    private _model: Model;\n\n    private _state;\n\n    constructor(view: IView) {\n        super();\n        this._view = view;\n        this.HTMLNode = this._view.node.querySelector('.log');\n        this._model = new Model();\n\n        this.init();\n    }\n\n    set state(state) {\n        this._update(state);\n    }\n\n    get state(){\n        return this._model.state;\n    }\n\n    get view(): IView {\n        return this._view;\n    }\n\n    get model(): Model {\n        return this._model;\n    }\n\n    public init(){}\n\n    public provide(modelClass){\n        this._model = new modelClass();\n    }\n\n    protected _update(data){\n        this._model.state = data;\n        this.log(`PRESENTER: ОБНОВИЛ ДАННЫЕ MODEL ${Object.keys(data)}` , messageType.INFO);\n    }\n\n}\n// взаимодествие между моделью и представлением\n","import { HTMLLogger, messageType } from '../../log/index';\nimport { Presenter } from '../presenter/index';\n\nexport interface IView{\n   node;\n}\n\nexport class View extends HTMLLogger implements IView{\n    private _presenter; // (IPresenter)\n    public node;\n\n    constructor(node){\n        super();\n        this.node = node;\n        this.HTMLNode = this.node.querySelector('.log');\n        this.log('VIEW: СОЗДАНО', messageType.INFO);\n        this._presenter = new Presenter(this); // decorator\n    }\n\n    public provide(presenterClass, modelClass){\n        this._presenter = new presenterClass(this);\n        this._presenter.provide(modelClass);\n        return this;\n    }\n\n    get presenter() {\n        return this._presenter;\n    }\n}\n\n// реализует отображение данных из модели, обращаясь к презентер за обновлениями\n","import { Presenter } from '../../../../modules/mvp/presenter/index';\nimport { messageType } from '../../../../modules/log/index';\nexport class MVPPresenter extends Presenter{\n\n    init(){\n        this.state = { data: 'Здесь появится ответ сервера', currentData: '' };\n        this.renderLabel(this.state);\n    }\n\n    click(){\n        this.log('PRESENTER: СОБЫТИЕ CLICK БЫЛО СОВЕРШЕНО', messageType.INFO);\n        this.changeDisableState({ isDisabled: true });\n\n        this.model['sendToServer'](this.view.node.querySelector('input').value)\n            .then((resp) => {\n                this.log('PRESENTER: СЕРВЕР ОТВЕТИЛ СО СТАТУСОМ 200', messageType.INFO);\n                this.state = { data: (resp) ? resp : 'YOU SEND EMPTY DATA' };\n                this.changeDisableState({ isDisabled: false });\n                this.renderLabel(this.state);\n            }).catch((e) => {\n                this.changeDisableState({ isDisabled: false });\n                this.log('PRESENTER: ВО ВРЕМЯ ОТПРАВКИ ДАННЫХ НА СЕРВЕР ПРОИЗОШЛА ОШИБКА', messageType.ERROR);\n            });\n    }\n\n    keyup(){\n        this.log('PRESENTER: СОБЫТИЕ KEY_UP БЫЛО СОВЕРШЕНО', messageType.INFO);\n        this.state = { currentData: this.view.node.querySelector('input').value };\n    }\n\n    renderLabel(data){\n        if (data.data){\n            this.view.node\n                .querySelector('.view-stub__label').innerText = data.data; // пока в тестовом режиме\n\n            this.log('PRESENTER: ОБНОВИЛ VIEW', messageType.INFO);\n        }\n    }\n\n    changeDisableState({ isDisabled }){\n        // повторяюсь =(\n        this.view.node\n            .querySelector('.view-stub__input').disabled = isDisabled;\n        this.view.node\n            .querySelector('.view-stub__apply').disabled = isDisabled;\n    }\n}\n","import { Model } from '../../../../modules/mvp/model/index';\nimport { messageType } from '../../../../modules/log/index';\nimport { sendToServer } from '../../../services/data';\nexport class MVPModel extends Model{\n    sendToServer(data){\n        this.log('MODEL: ОТПРАВИЛА НА СЕРВЕР ДАННЫЕ: ' + data, messageType.INFO);\n        return sendToServer(data);\n    }\n}\n","import './styles.scss';\n\nimport './modules/flux/views/log';\nimport './modules/flux/views/form';\nimport './modules/flux/store/';\n\nimport { Dispatcher } from '../modules/flux/';\nimport { INPUT_TYPE, BUTTON_TYPE } from './modules/flux/actions/';\n\nimport { MVPView } from './modules/mvp/views/index';\nimport { MVPPresenter } from './modules/mvp/presenters/index';\nimport { MVPModel } from './modules/mvp/model/index';\n\nconst FLUXInit = () => {\n\n    const flux = document.querySelector('.flux');\n    const input = flux.querySelector('input');\n    const button = flux.querySelector('.view-stub__apply');\n\n    const dispatcher = new Dispatcher(); //  можно создать через new, но он все равно SingleTone\n\n    button.addEventListener('click', () => {\n        dispatcher.dispatch({ type: BUTTON_TYPE.CLICK }); // payload необязательный\n    });\n\n    input.addEventListener('keyup', function () {\n        dispatcher.dispatch({ type: INPUT_TYPE.KEYUP, payload: this.value });\n    });\n};\n\nFLUXInit();\n\n/////////////////////////// Ст\n\nconst MVPInit = () => {\n\n    const mvp = document.querySelector('.mvp');\n\n    const view = new MVPView(mvp).provide(MVPPresenter, MVPModel);\n\n    const button = view.node.querySelector('.view-stub__apply');\n    const input = view.node.querySelector('input');\n\n    button.addEventListener('click', () => {\n        view.click();\n    });\n\n    input.addEventListener('keyup',  () => {\n       view.keyup();\n    });\n};\n\n\nMVPInit();\n\n\n\n\n\n","import { View } from '../../../../modules/mvp/view/index';\nimport { messageType } from '../../../../modules/log/index';\nexport class MVPView extends View{\n\n    click(){\n        this.log('VIEW ИНИЦИАЛИЗИРОВАЛО CLICK ПО BUTTON', messageType.INFO);\n        console.log(this.presenter);\n        this.presenter.click();\n    }\n\n    keyup(){\n        this.log('VIEW ИНИЦИАЛИЗИРОВАЛО СОБЫТИЕ KEY_UP ПО INPUT', messageType.INFO);\n        this.presenter.keyup();\n    }\n}\n"],"sourceRoot":""}